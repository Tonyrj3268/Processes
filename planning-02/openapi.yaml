openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
  description: API documentation for Processes
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /api/auth/login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address
                  example: user@example.com
                password:
                  type: string
                  description: The user's password, must be at least 6 characters long
                  example: password123!
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authorization
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Invalid email or password.
        "500":
          description: Server error
  /api/auth/register:
    post:
      summary: User registration
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user's chosen username, must be between 3 and 20 characters long
                  example: john_doe
                email:
                  type: string
                  description: The user's email address
                  example: user@example.com
                password:
                  type: string
                  description: The user's password
                  example: password123!
      responses:
        "201":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 註冊成功
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: User already exists.
  /api/comments:
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/comments/{commentId}:
    patch:
      summary: Update a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
    delete:
      summary: Delete a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to delete
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/comments/{commentId}/like:
    post:
      summary: Like a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to like
      responses:
        "200":
          description: Comment liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
    delete:
      summary: Unlike a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID of the comment to unlike
      responses:
        "200":
          description: Comment unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/events:
    get:
      summary: Retrieve notifications with pagination
      description: Fetch notifications with details about sender, receiver, timestamp, and event information.
      tags:
        - Event
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        sender:
                          type: string
                          description: ID of the sender
                        timestamp:
                          type: string
                          format: date-time
                          description: Time the notification was created
                        event:
                          type: object
                          properties:
                            type:
                              type: string
                              description: Type of the event
                            content:
                              type: string
                              description: Template or content of the event
              example:
                events:
                  - sender: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-30T10:15:30Z"
                    event:
                      type: like
                      content: User xxx liked your post
                  - sender: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-30T10:11:30Z"
                    event:
                      type: follow
                      content: User xxx commented on your post
        "400":
          description: Invalid query parameters.
        "500":
          description: Internal server error.
  /api/feed/home:
    get:
      summary: Retrieve user feed with pagination
      description: Fetch personalized feed with details about post content, author, likes, comment count, and timestamps.
      tags:
        - Feed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        postId:
                          type: string
                          description: ID of the post
                        author:
                          type: string
                          description: ID of the post author
                        timestamp:
                          type: string
                          format: date-time
                          description: Time the post was created
                        content:
                          type: string
                          description: Content of the post
                        likesCount:
                          type: integer
                          description: Number of likes on the post
                        commentCount:
                          type: integer
                          description: Number of comments on the post
              example:
                posts:
                  - postId: 5f8f8c44b54764421b715612
                    author: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-30T10:15:30Z"
                    content: Just finished a great workout session!
                    likesCount: 15
                    commentCount: 2
                  - postId: 5f8f8cakf54764421b715613
                    author: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-30T09:15:30Z"
                    content: Beautiful day at the beach!
                    likesCount: 25
                    commentCount: 1
        "400":
          description: Invalid query parameters.
        "500":
          description: Internal server error.
  /api/feed/search:
    get:
      summary: Search feed based on keywords
      description: Search posts in the user's feed by keywords with pagination
      tags:
        - Feed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Search query for finding posts
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        postId:
                          type: string
                          description: Unique identifier for the post
                        author:
                          type: string
                          description: ID of the post author
                        timestamp:
                          type: string
                          format: date-time
                          description: Time the post was created
                        content:
                          type: string
                          description: Content of the post
                        likesCount:
                          type: integer
                          description: Number of likes on the post
                        commentCount:
                          type: integer
                          description: Number of comments on the post
              example:
                posts:
                  - postId: posf8c44b5476442122156c9
                    author: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-30T08:15:30Z"
                    content: Exploring the city today!
                    likesCount: 20
                    commentCount: 5
                  - postId: posf8c44b54764421b7156c9
                    author: 5f8f8c44b54764421b7156c9
                    timestamp: "2024-10-29T14:20:30Z"
                    content: A day well spent with friends.
                    likesCount: 30
                    commentCount: 7
        "400":
          description: Invalid query parameters.
        "500":
          description: Internal server error.
  /api/posts:
    get:
      summary: Retrieve all posts
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        postId:
                          type: string
                        author:
                          type: string
                        content:
                          type: string
                        likesCount:
                          type: number
                        commentCount:
                          type: number
                        createdAt:
                          type: string
                          format: date-time
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "201":
          description: Post created successfully
  /api/posts/{postId}:
    patch:
      summary: Update a post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Post updated successfully
    delete:
      summary: Delete a post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to delete
      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/posts/{postId}/like:
    post:
      summary: Like a post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to like
      responses:
        "200":
          description: Post liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
    delete:
      summary: Unlike a post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to unlike
      responses:
        "200":
          description: Post unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/posts/{postId}/comments:
    post:
      summary: Add a comment to a post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to comment on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/users/{userId}:
    get:
      summary: Get user profile
      description: Retrieve a user's profile information. If requesting one's own profile, full information is returned, otherwise limited public information is provided.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
          example: 60f7b4d9f42b5c0018c0b5a5
      responses:
        "200":
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The user's ID
                    example: 60f7b4d9f42b5c0018c0b5a5
                  accountName:
                    type: string
                    example: johndoe123
                  userName:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    description: Only available if authenticated user is requesting their own profile
                    example: john@example.com
                  bio:
                    type: string
                    example: Passionate about technology and open source.
                  avatarUrl:
                    type: string
                    example: https://example.com/avatar.jpg
                  followersCount:
                    type: integer
                    example: 120
                  followingCount:
                    type: integer
                    example: 80
                  createdAt:
                    type: string
                    format: date-time
                    example: "2021-07-21T17:32:28Z"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 使用者不存在
        "500":
          description: Server error
  /api/users/profile:
    patch:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username for the user
                  example: new_username
                email:
                  type: string
                  description: New email for the user
                  example: new_email@example.com
                isPublic:
                  type: boolean
                  description: Whether the user's profile is public
                  example: true
                bio:
                  type: string
                  description: Short biography for the user, max 100 characters
                  example: Enthusiastic developer and tech lover.
                  maxLength: 100
      responses:
        "200":
          description: User profile successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 使用者資料已更新
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60f7b4d9f42b5c0018c0b5a5
                      username:
                        type: string
                        example: new_username
                      email:
                        type: string
                        example: new_email@example.com
                      isPublic:
                        type: boolean
                        example: true
                      bio:
                        type: string
                        example: Enthusiastic developer and tech lover.
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Bio must not exceed 100 characters
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 使用者不存在
        "500":
          description: Server error
  /api/user/follow:
    post:
      summary: Follow a user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user to follow
                  example: 5f8f8c44b54764421b7156c9
      responses:
        "200":
          description: Successfully followed the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 成功追蹤使用者
        "400":
          description: Invalid request, such as trying to follow oneself or missing/invalid userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example:
                      validationError:
                        value: 請求內容錯誤
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 使用者不存在
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 伺服器發生錯誤
  /api/user/unfollow:
    post:
      summary: Unfollow a user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The mongo objectID of the user to unfollow
                  example: 5f8f8c44b54764421b7156c9
      responses:
        "200":
          description: Successfully unfollowed the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 成功取消追蹤使用者
        "400":
          description: Invalid request, such as missing/invalid userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 請求內容錯誤
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 使用者不存在
        "500":
          description: Server error
tags:
  - name: Auth
    description: User authentication and registration
  - name: Comments
    description: API endpoints for managing comments
  - name: Event
    description: User's events, only accessible to authenticated users
  - name: Feed
    description: User's personalized feed, only accessible to authenticated users
  - name: Posts
    description: API endpoints for managing posts
  - name: Users
    description: User management
